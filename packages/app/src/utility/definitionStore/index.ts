import server from '../api/axiosConfig';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Dimensions } from 'react-native';
import useUserStore from '../store/userStore';
import messaging from '@react-native-firebase/messaging';

export interface MessageType {
  senderUsername: string;
  receiverUsername: string;
  message: string;
  createdAt: string;
}

export interface FriendType {
  username: string;
  name: string;
  status: 'pending' | 'accepted' | 'rejected' | 'blocked' | 'notFriend';
  party: string;
}

const UNIT_KM_LAT = 0.009009009;
const WIDTH = Dimensions.get('window').width;
const HEIGHT = Dimensions.get('window').height;
const CURR_VIEW_DISTANCE = 1;
export const LATITUDE_DELTA = UNIT_KM_LAT * CURR_VIEW_DISTANCE;
export const LONGITUDE_DELTA = (WIDTH / HEIGHT) * LATITUDE_DELTA;

export interface Location { // This is the interface for the location object   
    latitude: number;
    longitude: number;
}
  
export interface MyLocation extends Location {  // This is the interface for the location object with delta
    latitudeDelta: number;
    longitudeDelta: number;
  }

export interface LocationMarker {   // This is the interface for the location marker object
    latlng: Location;
    title: string; // IMP: Will be used to store usernames for respected markers
    description: string | null;
}

export interface LocationPayload {
  fromUsername: string;
  location: Location;
}

export function useAuthFunctions() {
  const setAuthToken = useUserStore(state => state.setAuthToken)
  const setName = useUserStore(state => state.setName)
  const setUsername = useUserStore(state => state.setUsername)
  const login = async (username: string, password: string) => { // This function is used to login the user
    const fcmToken = await messaging().getToken();
    try {
      const response = await server.post('/auth/login', {
        username: username,
        passwd: password,
        fcmToken: fcmToken,
      });
      if (response.status === 200) {
        console.log(response.data)
        setAuthToken(response.data.authToken)
        setName(response.data.name)
        setUsername(username)
        AsyncStorage.setItem('authToken', response.data.authToken);
        AsyncStorage.setItem('name', response.data.name);
        AsyncStorage.setItem('username', username);
        AsyncStorage.setItem('fcmToken', fcmToken);
        console.log("at login token: ", fcmToken)
        return null;
      } else {
        return 'Incorrect Credentials !!';
      }
    } catch (error) {
      console.log(error);
      return 'Problem while logging in !!';
    }
  };
  
  const register = async (username: string, password: string, name: string) => { // This function is used to register the user
    try {
      const response = await server.post('/auth/register', {
        username: username,
        passwd: password,
        name: name,
      });
      if (response.status === 201) {
        return null;
      }
    } catch (error) {
      console.log(error);
      return 'Problem while SignUp !!';
    }
  };
  return {login, register};
}

export const lightThemeColors = {
  text: {
      accent: {
          tailwind: 'text-blue-700',
          hex: '#1d4ed8'
      },
      primary: {
          tailwind: 'text-black',
          hex: '#000000'
      },
      secondary: {
          tailwind: 'text-gray-500',
          hex: '#6B7280'
      },
  },
  background: {
      primary: {
          tailwind: 'bg-gray-50',
          hex: '#F9FAFB'
      },
      secondary: {
          tailwind: 'bg-white',
          hex: '#FFFFFF'
      },
      card: {
          tailwind: 'bg-gray-100',
          hex: '#f3f4f6'
      },
      accent: {
          tailwind: 'bg-blue-50',
          hex: '#EFF6FF'
      }
  },
  border: {
      primary: {
          tailwind: 'border-gray-300', // Autogenerated :)
          hex: '#D1D5DB'               // Autogenerated :)
      }
  },
  icons: {
      primary: {
          tailwind: 'text-black',
          hex: '#000000'
      },
      secondary: {
          tailwind: 'text-gray-500',
          hex: '#6B7280'
      },
      accent: {
          tailwind: 'text-blue-700',
          hex: '#1d4ed8'
      }
  }
};

export const darkThemeColors = {
  text: {
      accent: {
          tailwind: 'text-blue-700',
          hex: '#1d4ed8'
      },
      primary: {
          tailwind: 'text-white',
          hex: '#ffffff'
      },
      secondary: {
          tailwind: 'text-gray-500',
          hex: '#6B7280'
      },
  },
  background: {
      primary: {
          tailwind: 'bg-gray-800',
          hex: '#1f2937'
      },
      secondary: {
          tailwind: 'bg-gray-900',
          hex: '#111827'
      },
      card: {
          tailwind: 'bg-gray-700',
          hex: '#374151'
      },
      accent: {
          tailwind: 'bg-blue-700',
          hex: '#1d4ed8'
      }
  },
  border: {
      primary: {
          tailwind: 'border-gray-700', // Autogenerated :)
          hex: '#374151'               // Autogenerated :)
      }
  },
  icons: {
      primary: {
          tailwind: 'text-white',
          hex: '#ffffff'
      },
      secondary: {
          tailwind: 'text-gray-500',
          hex: '#6B7280'
      },
      accent: {
          tailwind: 'text-blue-700',
          hex: '#1d4ed8'
      }
  }
};

export const mapStyle = [
  {
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#1d2c4d"
      }
    ]
  },
  {
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#8ec3b9"
      }
    ]
  },
  {
    "elementType": "labels.text.stroke",
    "stylers": [
      {
        "color": "#1a3646"
      }
    ]
  },
  {
    "featureType": "administrative.country",
    "elementType": "geometry.stroke",
    "stylers": [
      {
        "color": "#4b6878"
      }
    ]
  },
  {
    "featureType": "administrative.land_parcel",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#64779e"
      }
    ]
  },
  {
    "featureType": "administrative.province",
    "elementType": "geometry.stroke",
    "stylers": [
      {
        "color": "#4b6878"
      }
    ]
  },
  {
    "featureType": "landscape.man_made",
    "elementType": "geometry.stroke",
    "stylers": [
      {
        "color": "#334e87"
      }
    ]
  },
  {
    "featureType": "landscape.natural",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#023e58"
      }
    ]
  },
  {
    "featureType": "poi",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#283d6a"
      }
    ]
  },
  {
    "featureType": "poi",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#6f9ba5"
      }
    ]
  },
  {
    "featureType": "poi",
    "elementType": "labels.text.stroke",
    "stylers": [
      {
        "color": "#1d2c4d"
      }
    ]
  },
  {
    "featureType": "poi.park",
    "elementType": "geometry.fill",
    "stylers": [
      {
        "color": "#023e58"
      }
    ]
  },
  {
    "featureType": "poi.park",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#3C7680"
      }
    ]
  },
  {
    "featureType": "road",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#304a7d"
      }
    ]
  },
  {
    "featureType": "road",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#98a5be"
      }
    ]
  },
  {
    "featureType": "road",
    "elementType": "labels.text.stroke",
    "stylers": [
      {
        "color": "#1d2c4d"
      }
    ]
  },
  {
    "featureType": "road.highway",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#2c6675"
      }
    ]
  },
  {
    "featureType": "road.highway",
    "elementType": "geometry.stroke",
    "stylers": [
      {
        "color": "#255763"
      }
    ]
  },
  {
    "featureType": "road.highway",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#b0d5ce"
      }
    ]
  },
  {
    "featureType": "road.highway",
    "elementType": "labels.text.stroke",
    "stylers": [
      {
        "color": "#023e58"
      }
    ]
  },
  {
    "featureType": "transit",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#98a5be"
      }
    ]
  },
  {
    "featureType": "transit",
    "elementType": "labels.text.stroke",
    "stylers": [
      {
        "color": "#1d2c4d"
      }
    ]
  },
  {
    "featureType": "transit.line",
    "elementType": "geometry.fill",
    "stylers": [
      {
        "color": "#283d6a"
      }
    ]
  },
  {
    "featureType": "transit.station",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#3a4762"
      }
    ]
  },
  {
    "featureType": "water",
    "elementType": "geometry",
    "stylers": [
      {
        "color": "#0e1626"
      }
    ]
  },
  {
    "featureType": "water",
    "elementType": "labels.text.fill",
    "stylers": [
      {
        "color": "#4e6d70"
      }
    ]
  }
]
